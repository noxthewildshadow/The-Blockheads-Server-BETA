#!/bin/bash

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_step() {
    echo -e "${CYAN}[STEP]${NC} $1"
}

print_header() {
    echo -e "${MAGENTA}================================================================================${NC}"
    echo -e "${MAGENTA}$1${NC}"
    echo -e "${MAGENTA}================================================================================${NC}"
}

# Configuration
BASE_DIR="$HOME/GNUstep/Library/ApplicationSupport/TheBlockheads"
SAVES_DIR="$BASE_DIR/saves"
CLOUD_ADMIN_FILE="$BASE_DIR/cloudWideOwnedAdminlist.txt"

# Cooldown function
apply_cooldown() {
    sleep 0.5
}

# Send command to server
send_command() {
    local world_id="$1"
    local command="$2"
    local console_file="$SAVES_DIR/${world_id}/console.log"
    
    if [ -f "$console_file" ]; then
        echo "$command" >> "$console_file"
        print_status "Command sent to $world_id: $command"
    else
        print_error "Console file not found for world $world_id: $console_file"
    fi
}

# Clear chat for player
clear_chat() {
    local world_id="$1"
    local player="$2"
    send_command "$world_id" "/clear $player"
    apply_cooldown
}

# Get active worlds
get_active_worlds() {
    find "$SAVES_DIR" -name "console.log" -type f 2>/dev/null | \
    xargs -I {} dirname {} | \
    xargs -I {} basename {} | \
    grep -v "^$"
}

# Find player world by name
find_player_world() {
    local player_name="$1"
    for world_id in $(get_active_worlds); do
        local console_file="$SAVES_DIR/$world_id/console.log"
        if [ -f "$console_file" ] && tail -n 50 "$console_file" | grep -q "Player Connected.*$player_name"; then
            echo "$world_id"
            return 0
        fi
    done
    echo ""
    return 1
}

# Get player IP from console
get_player_ip() {
    local world_id="$1"
    local player_name="$2"
    local console_file="$SAVES_DIR/$world_id/console.log"
    
    if [ -f "$console_file" ]; then
        local connection_line=$(grep "Player Connected.*$player_name" "$console_file" | tail -n 1)
        if [[ "$connection_line" =~ \|\ ([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)\ | ]]; then
            echo "${BASH_REMATCH[1]}"
            return 0
        fi
    fi
    echo ""
    return 1
}

# Validate password
validate_password() {
    local password="$1"
    local length=${#password}
    
    if [ $length -lt 7 ] || [ $length -gt 16 ]; then
        echo "Password must be between 7 and 16 characters"
        return 1
    fi
    
    if [[ ! "$password" =~ ^[a-zA-Z0-9]+$ ]]; then
        echo "Password must contain only letters and numbers"
        return 1
    fi
    
    return 0
}

# Update list files (ignoring first two lines)
update_list_file() {
    local list_file="$1"
    local player_name="$2"
    local action="$3" # "add" or "remove"
    
    if [ ! -f "$list_file" ]; then
        # Create file with header
        echo "# Generated by rank_patcher.sh" > "$list_file"
        echo "# Do not edit manually" >> "$list_file"
    fi
    
    local temp_file=$(mktemp)
    
    # Keep first two lines
    head -n 2 "$list_file" > "$temp_file" 2>/dev/null
    
    # Process the rest
    if [ "$action" = "add" ]; then
        # Add player if not already present
        tail -n +3 "$list_file" 2>/dev/null | grep -v "^$" | sort -u > "${temp_file}.content"
        echo "$player_name" >> "${temp_file}.content"
        sort -u "${temp_file}.content" >> "$temp_file"
        rm -f "${temp_file}.content"
    else
        # Remove player
        tail -n +3 "$list_file" 2>/dev/null | grep -v "^$player_name$" | sort -u >> "$temp_file"
    fi
    
    mv "$temp_file" "$list_file"
}

# Process rank changes
process_rank_change() {
    local player_name="$1"
    local old_rank="$2"
    local new_rank="$3"
    local world_id="$4"
    
    print_status "Processing rank change for $player_name: $old_rank -> $new_rank"
    
    case "$new_rank" in
        ADMIN)
            if [ "$old_rank" = "NONE" ] || [ "$old_rank" = "MOD" ]; then
                send_command "$world_id" "/admin $player_name"
                # Update adminlist
                local admin_file="$SAVES_DIR/$world_id/adminlist.txt"
                update_list_file "$admin_file" "$player_name" "add"
            fi
            ;;
        MOD)
            if [ "$old_rank" = "NONE" ]; then
                send_command "$world_id" "/mod $player_name"
                # Update modlist
                local mod_file="$SAVES_DIR/$world_id/modlist.txt"
                update_list_file "$mod_file" "$player_name" "add"
            fi
            ;;
        SUPER)
            # Update cloud-wide admin list
            if [ ! -f "$CLOUD_ADMIN_FILE" ]; then
                echo "# Cloud-wide admin list" > "$CLOUD_ADMIN_FILE"
                echo "# Managed by rank_patcher.sh" >> "$CLOUD_ADMIN_FILE"
            fi
            if ! grep -q "^$player_name$" "$CLOUD_ADMIN_FILE" 2>/dev/null; then
                echo "$player_name" >> "$CLOUD_ADMIN_FILE"
            fi
            ;;
        NONE)
            if [ "$old_rank" = "ADMIN" ]; then
                send_command "$world_id" "/unadmin $player_name"
                local admin_file="$SAVES_DIR/$world_id/adminlist.txt"
                update_list_file "$admin_file" "$player_name" "remove"
            elif [ "$old_rank" = "MOD" ]; then
                send_command "$world_id" "/unmod $player_name"
                local mod_file="$SAVES_DIR/$world_id/modlist.txt"
                update_list_file "$mod_file" "$player_name" "remove"
            elif [ "$old_rank" = "SUPER" ]; then
                # Remove from cloud-wide admin list
                if [ -f "$CLOUD_ADMIN_FILE" ]; then
                    local temp_file=$(mktemp)
                    grep -v "^$player_name$" "$CLOUD_ADMIN_FILE" > "$temp_file"
                    mv "$temp_file" "$CLOUD_ADMIN_FILE"
                fi
            fi
            ;;
    esac
    
    apply_cooldown
}

# Process blacklist changes
process_blacklist_change() {
    local player_name="$1"
    local old_status="$2"
    local new_status="$3"
    local world_id="$4"
    local player_ip="$5"
    
    if [ "$new_status" = "YES" ] && [ "$old_status" = "NO" ]; then
        print_status "Blacklisting player: $player_name ($player_ip)"
        
        # Remove privileges first
        send_command "$world_id" "/unmod $player_name"
        send_command "$world_id" "/unadmin $player_name"
        
        # Ban player and IP
        send_command "$world_id" "/ban $player_name"
        send_command "$world_id" "/ban $player_ip"
        
        # If player was SUPER, stop them first
        if grep -q "^$player_name.*SUPER" "$players_file" 2>/dev/null; then
            send_command "$world_id" "/stop"
            # Remove from cloud-wide admin list
            if [ -f "$CLOUD_ADMIN_FILE" ]; then
                local temp_file=$(mktemp)
                grep -v "^$player_name$" "$CLOUD_ADMIN_FILE" > "$temp_file"
                mv "$temp_file" "$CLOUD_ADMIN_FILE"
            fi
        fi
        
        # Update blacklist file
        local blacklist_file="$SAVES_DIR/$world_id/blacklist.txt"
        update_list_file "$blacklist_file" "$player_name" "add"
        update_list_file "$blacklist_file" "$player_ip" "add"
        
        apply_cooldown
    elif [ "$new_status" = "NO" ] && [ "$old_status" = "YES" ]; then
        # Unban player
        send_command "$world_id" "/unban $player_name"
        send_command "$world_id" "/unban $player_ip"
        
        # Update blacklist file
        local blacklist_file="$SAVES_DIR/$world_id/blacklist.txt"
        update_list_file "$blacklist_file" "$player_name" "remove"
        update_list_file "$blacklist_file" "$player_ip" "remove"
        
        apply_cooldown
    fi
}

# Process password command
process_password_command() {
    local world_id="$1"
    local player_name="$2"
    local password="$3"
    local confirm_password="$4"
    local players_file="$SAVES_DIR/$world_id/players.log"
    
    clear_chat "$world_id" "$player_name"
    
    # Validate passwords
    if [ "$password" != "$confirm_password" ]; then
        send_command "$world_id" "msg $player_name Passwords do not match"
        apply_cooldown
        return 1
    fi
    
    local validation_result=$(validate_password "$password")
    if [ $? -ne 0 ]; then
        send_command "$world_id" "msg $player_name $validation_result"
        apply_cooldown
        return 1
    fi
    
    # Update players.log
    if [ -f "$players_file" ]; then
        local temp_file=$(mktemp)
        while IFS='|' read -r name ip pass rank whitelist blacklist; do
            if [ "$name" = "$player_name" ]; then
                echo "$name|$ip|$password|$rank|$whitelist|$blacklist" >> "$temp_file"
            else
                echo "$name|$ip|$pass|$rank|$whitelist|$blacklist" >> "$temp_file"
            fi
        done < <(grep -v "^#" "$players_file" 2>/dev/null | grep -v "^$")
        
        mv "$temp_file" "$players_file"
        send_command "$world_id" "msg $player_name Password set successfully"
        print_success "Password set for player: $player_name"
    else
        send_command "$world_id" "msg $player_name Error: Player record not found"
        print_error "Players file not found: $players_file"
    fi
    
    apply_cooldown
}

# Process IP change command
process_ip_change() {
    local world_id="$1"
    local player_name="$2"
    local password="$3"
    local players_file="$SAVES_DIR/$world_id/players.log"
    local current_ip=$(get_player_ip "$world_id" "$player_name")
    
    clear_chat "$world_id" "$player_name"
    
    if [ -z "$current_ip" ]; then
        send_command "$world_id" "msg $player_name Error: Could not retrieve your IP"
        apply_cooldown
        return 1
    fi
    
    # Verify password
    if [ ! -f "$players_file" ]; then
        send_command "$world_id" "msg $player_name Error: Player record not found"
        apply_cooldown
        return 1
    fi
    
    local stored_password=""
    while IFS='|' read -r name ip pass rank whitelist blacklist; do
        if [ "$name" = "$player_name" ]; then
            stored_password=$(echo "$pass" | xargs)
            break
        fi
    done < <(grep -v "^#" "$players_file" 2>/dev/null | grep -v "^$")
    
    if [ "$stored_password" != "$password" ]; then
        send_command "$world_id" "msg $player_name Error: Incorrect password"
        apply_cooldown
        return 1
    fi
    
    # Update IP in players.log
    local temp_file=$(mktemp)
    while IFS='|' read -r name ip pass rank whitelist blacklist; do
        if [ "$name" = "$player_name" ]; then
            echo "$name|$current_ip|$pass|$rank|$whitelist|$blacklist" >> "$temp_file"
        else
            echo "$name|$ip|$pass|$rank|$whitelist|$blacklist" >> "$temp_file"
        fi
    done < <(grep -v "^#" "$players_file" 2>/dev/null | grep -v "^$")
    
    mv "$temp_file" "$players_file"
    send_command "$world_id" "msg $player_name IP updated successfully"
    print_success "IP updated for player: $player_name ($current_ip)"
    
    apply_cooldown
}

# Process change password command
process_change_password() {
    local world_id="$1"
    local player_name="$2"
    local old_password="$3"
    local new_password="$4"
    local players_file="$SAVES_DIR/$world_id/players.log"
    
    clear_chat "$world_id" "$player_name"
    
    # Validate new password
    local validation_result=$(validate_password "$new_password")
    if [ $? -ne 0 ]; then
        send_command "$world_id" "msg $player_name $validation_result"
        apply_cooldown
        return 1
    fi
    
    # Verify old password and update
    if [ -f "$players_file" ]; then
        local temp_file=$(mktemp)
        local updated=0
        
        while IFS='|' read -r name ip pass rank whitelist blacklist; do
            if [ "$name" = "$player_name" ]; then
                if [ "$pass" = "$old_password" ]; then
                    echo "$name|$ip|$new_password|$rank|$whitelist|$blacklist" >> "$temp_file"
                    updated=1
                else
                    echo "$name|$ip|$pass|$rank|$whitelist|$blacklist" >> "$temp_file"
                    send_command "$world_id" "msg $player_name Error: Incorrect old password"
                    apply_cooldown
                    rm -f "$temp_file"
                    return 1
                fi
            else
                echo "$name|$ip|$pass|$rank|$whitelist|$blacklist" >> "$temp_file"
            fi
        done < <(grep -v "^#" "$players_file" 2>/dev/null | grep -v "^$")
        
        if [ $updated -eq 1 ]; then
            mv "$temp_file" "$players_file"
            send_command "$world_id" "msg $player_name Password changed successfully"
            print_success "Password changed for player: $player_name"
        fi
    else
        send_command "$world_id" "msg $player_name Error: Player record not found"
        print_error "Players file not found: $players_file"
    fi
    
    apply_cooldown
}

# Monitor console logs for commands
monitor_console_logs() {
    print_header "Starting console log monitoring"
    
    while true; do
        for world_id in $(get_active_worlds); do
            local console_file="$SAVES_DIR/$world_id/console.log"
            local players_file="$SAVES_DIR/$world_id/players.log"
            
            if [ ! -f "$console_file" ]; then
                continue
            fi
            
            # Check for commands in the last few lines
            tail -n 10 "$console_file" | while read line; do
                # Check for chat messages with commands
                if [[ "$line" =~ ([A-Za-z0-9_]+):\ (![a-z_]+[[:space:]]+.*) ]]; then
                    local player_name="${BASH_REMATCH[1]}"
                    local command_text="${BASH_REMATCH[2]}"
                    
                    # Process different commands
                    case "$command_text" in
                        !password*)
                            # Format: !password PASS CONFIRM_PASS
                            local args=$(echo "$command_text" | cut -d' ' -f2-)
                            local password=$(echo "$args" | awk '{print $1}')
                            local confirm_password=$(echo "$args" | awk '{print $2}')
                            
                            if [ -n "$password" ] && [ -n "$confirm_password" ]; then
                                process_password_command "$world_id" "$player_name" "$password" "$confirm_password" &
                            else
                                send_command "$world_id" "msg $player_name Usage: !password NEW_PASSWORD CONFIRM_PASSWORD"
                                apply_cooldown
                            fi
                            ;;
                            
                        !ip_change*)
                            # Format: !ip_change PASSWORD
                            local password=$(echo "$command_text" | awk '{print $2}')
                            
                            if [ -n "$password" ]; then
                                process_ip_change "$world_id" "$player_name" "$password" &
                            else
                                send_command "$world_id" "msg $player_name Usage: !ip_change YOUR_PASSWORD"
                                apply_cooldown
                            fi
                            ;;
                            
                        !change_psw*)
                            # Format: !change_psw OLD_PASSWORD NEW_PASSWORD
                            local args=$(echo "$command_text" | cut -d' ' -f2-)
                            local old_password=$(echo "$args" | awk '{print $1}')
                            local new_password=$(echo "$args" | awk '{print $2}')
                            
                            if [ -n "$old_password" ] && [ -n "$new_password" ]; then
                                process_change_password "$world_id" "$player_name" "$old_password" "$new_password" &
                            else
                                send_command "$world_id" "msg $player_name Usage: !change_psw OLD_PASSWORD NEW_PASSWORD"
                                apply_cooldown
                            fi
                            ;;
                    esac
                fi
            done
        done
        
        sleep 0.25
    done
}

# Monitor players.log for changes
monitor_players_log() {
    print_header "Starting players.log monitoring"
    
    while true; do
        for world_id in $(get_active_worlds); do
            local players_file="$SAVES_DIR/$world_id/players.log"
            
            if [ ! -f "$players_file" ]; then
                # Create initial players.log if world exists but file doesn't
                if [ -d "$SAVES_DIR/$world_id" ]; then
                    echo "# Player database for world $world_id" > "$players_file"
                    echo "# Format: NAME|IP|PASSWORD|RANK|WHITELISTED|BLACKLISTED" >> "$players_file"
                    print_success "Created players.log for world $world_id"
                fi
                continue
            fi
            
            # Check for new player connections and add them to players.log
            local console_file="$SAVES_DIR/$world_id/console.log"
            if [ -f "$console_file" ]; then
                # Look for player connections in console log
                grep "Player Connected" "$console_file" | while read connection_line; do
                    if [[ "$connection_line" =~ Player\ Connected\ ([A-Za-z0-9_]+)\ \|\ ([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+) ]]; then
                        local player_name="${BASH_REMATCH[1]}"
                        local player_ip="${BASH_REMATCH[2]}"
                        
                        # Check if player already exists
                        if ! grep -q "^$player_name|" "$players_file" 2>/dev/null; then
                            # Add new player
                            echo "$player_name|$player_ip|NONE|NONE|NO|NO" >> "$players_file"
                            print_success "Added new player: $player_name ($player_ip)"
                            
                            # Request password creation
                            send_command "$world_id" "msg $player_name Welcome! Please create a password using: !password NEW_PASSWORD CONFIRM_PASSWORD"
                            send_command "$world_id" "msg $player_name You have 60 seconds to create a password"
                            
                            # Start password creation timeout
                            (
                                sleep 60
                                # Check if password was created
                                if grep -q "^$player_name|[^|]*|NONE|" "$players_file" 2>/dev/null; then
                                    send_command "$world_id" "/kick $player_name"
                                    send_command "$world_id" "msg $player_name You were kicked for not creating a password"
                                    print_warning "Kicked player $player_name for not creating password"
                                fi
                            ) &
                        else
                            # Check IP change
                            local stored_ip=$(grep "^$player_name|" "$players_file" | head -1 | cut -d'|' -f2 | xargs)
                            if [ "$stored_ip" != "$player_ip" ] && [ "$stored_ip" != "UNKNOWN" ]; then
                                send_command "$world_id" "msg $player_name IP change detected! Verify with: !ip_change YOUR_PASSWORD"
                                send_command "$world_id" "msg $player_name You have 30 seconds to verify"
                                
                                # Start IP verification timeout
                                (
                                    sleep 30
                                    # Check if IP was verified
                                    local current_stored_ip=$(grep "^$player_name|" "$players_file" | head -1 | cut -d'|' -f2 | xargs)
                                    if [ "$current_stored_ip" != "$player_ip" ]; then
                                        send_command "$world_id" "/kick $player_name"
                                        send_command "$world_id" "/ban $player_ip"
                                        print_warning "Kicked and banned player $player_name for IP verification failure"
                                        
                                        # Temporary ban - unban after 30 seconds
                                        (
                                            sleep 30
                                            send_command "$world_id" "/unban $player_ip"
                                            print_status "Temporary ban lifted for IP: $player_ip"
                                        ) &
                                    fi
                                ) &
                            fi
                        fi
                    fi
                done
            fi
            
            # Process changes in players.log
            local temp_file=$(mktemp)
            cp "$players_file" "$temp_file"
            
            if [ -f "${players_file}.last" ]; then
                # Compare with previous version to detect changes
                while IFS='|' read -r name ip pass rank whitelist blacklist; do
                    # Skip comments and empty lines
                    [[ "$name" =~ ^# ]] && continue
                    [ -z "$name" ] && continue
                    
                    # Find previous state
                    local old_line=$(grep "^$name|" "${players_file}.last" 2>/dev/null | head -1)
                    if [ -n "$old_line" ]; then
                        IFS='|' read -r old_name old_ip old_pass old_rank old_whitelist old_blacklist <<< "$old_line"
                        
                        # Check for rank changes
                        if [ "$rank" != "$old_rank" ]; then
                            process_rank_change "$name" "$old_rank" "$rank" "$world_id" &
                        fi
                        
                        # Check for blacklist changes
                        if [ "$blacklist" != "$old_blacklist" ]; then
                            process_blacklist_change "$name" "$old_blacklist" "$blacklist" "$world_id" "$ip" &
                        fi
                    fi
                done < "$temp_file"
            fi
            
            # Update last version
            cp "$temp_file" "${players_file}.last"
            rm -f "$temp_file"
        done
        
        sleep 0.25
    done
}

# Main function
main() {
    print_header "THE BLOCKHEADS RANK PATCHER"
    print_status "Starting rank patcher service..."
    
    # Check if base directory exists
    if [ ! -d "$BASE_DIR" ]; then
        print_error "Base directory not found: $BASE_DIR"
        print_error "Make sure The Blockheads server is installed correctly"
        exit 1
    fi
    
    # Create saves directory if it doesn't exist
    mkdir -p "$SAVES_DIR"
    
    # Start monitoring processes in background
    monitor_players_log &
    monitor_console_logs &
    
    print_success "Rank patcher started successfully"
    print_status "Monitoring player data and console commands..."
    
    # Wait for background processes
    wait
}

# Signal handling
trap 'print_header "Rank Patcher Stopped"; exit 0' INT TERM

# Run main function
main
